---
layout: post
title: "Omega 4"
date: 2013-11-14 16:16
comments: true
categories: drupal
---
##Are you ready for Omega 4?

Over the past couple of years I've been used Omega 3 as my base theme of choice. It provides plenty of features to get up and running quickly; creating sub-themes using drush, exporting theme settings to the info file (thanks to Omega Tools).

Omega 3 provides the best in combining command line functions with a user interface to make sure a lot of hard work is done for you; easy toggle options for default css files, ~~responsive~~ adaptive web design available to turn on when required.

All of these features have made Omega 3 the de facto standard for a lot of Drupal themers. 

<!-- more -->

###What about Omega 4? 

Omega 4 is a bold progression to keep Omega up to date with the latest best practices, using all that SASS and Compass have to offer. Currently this means to get the best out of the Omega you will need to get your hands dirty in the command line; which in my experience is not a bad thing at all. 

The first time I had heard about Omega 4 was at the Frontend United conference in London April 2013 where I was speaking to Matt Smith about it; Matt is one of the maintainers of Omega 4. A lot of what he showed me at the time went a little over my head, as it seemed so far removed from Omega 3, and even he questioned if it should be called Omega at all. Sam Richards (Snugug) was one of the speakers at the conference, and his talk also had the same effect of tickling my ears with talk about the Compass extensions Singularity and Breakpoint, which make creating grids and responsive design easier to manage. 

After the conference I took a peak under the hood of Omega 4 and the Compass extensions Snugug highlighted, but it was all a little bit too much for me to take on board. Thankfully, over the last couple of months I've had the opportunity to learn a few things about Ruby Version Manager, installing various ruby gems, playing a little with Angular JS and tractor, poking around in the Radix theme and getting a better understanding of how it uses Ruby Gems to add Twitter Bootstrap features. Plus, getting to grips with responsive web design, and understanding some of the common perils and pitfalls that are par for the course of creating responsive themes.

All of this experience has provided invaluable knowledge of where web design and frontend development of the future is going, and Omega 4 has embraced the future and is determined to provide Drupal themers with the tools that they need to embrace it too!

The rest of this article is going to focus on the components of Omega 4 and hopefully make it easier for people to get their head around them. Lets get to it.

###Assumptions

Before we start there's a caveat, you will need an understanding of Drush and SASS/Compass. I'm not going to go in to any detail about these two. They have been around long enough that if you were using Omega 3 you should be familiar with Drush and SASS/Compass already.


###Omega 4

First look at Omega 4 there are just 2 directories in the theme:

* **ohm** - A demo theme, placed in the main directory because of problems with inheritance.

* **omega** - The main Omega 4 theme, including the starterkits/default directory with is the basis for creating a sub-theme.

Note: Omega Tools module is no longer required as the core functionality this provided now comes as standard.

**Starterkits**

	startkits/default

Lets take a look under the hood of the default starter kit to get an idea of how it all works. This is what is included:

* RVM and Ruby Gems
* Bundler
* Susy or Singularity Grid System
* Breakpoint
* Toolkit
* Polyfills
* Guard or Grunt


##What is RVM and Ruby Gems?

It is recommended that to use Omega 4 you should use RVM (Ruby Version Manager). RVM will provide you with the ability to create a consistent environment for you and people you work with. One of the problems with using Ruby is as things get updated you may find you get conflicts, so to avoid any issues if everyone is using the same versions of all the Ruby Gems, for any particular project, then everything will work as expected. If you start a new project and you want to use the latest versions, no problem just create a new gem set and your good to go, you can switch from one project to the next and have it setup so you only ever use the correct gems for that project.

RVM comes with a set of default gems including 'bundler', 'rake', 'rubygems-bundler' and 'dvm' gems.

In Omega 4 Startkit there are 2 files for use with RVM:

* **.ruby-gemset** - This file contains the name of the RVM gem set to use.

* **.ruby-version** - This file contains the version of ruby to use.

###Bundler

RVM helps to have per project environments to make sure we are using the same version of ruby gems as other people we work with, where does Bundler fit in? Think of RVM being like a shopping bag that contains all our gems, Bundler is a shopping list that defines the gems that we want.

Lets take a look at 2 files in the Omega 4 directory, Gemfile and Gemfile.lock.

**Gemfile**

This provides a shopping list of all the Gems that are required for our project.

	  # Sass, Compass and extensions.
	  gem 'sass'                    	# Sass.
	  gem 'sass-globbing'           	# Import Sass files based on blobbing pattern.
	  gem 'compass'                 	# Framework built on Sass.
	  gem 'compass-validator'    	# So you can `compass validate`.
	  gem 'compass-normalize'  	# Compass version of normalize.css.
	  gem 'compass-rgbapng'     	# Turns rgba() into .png's for backwards compatibility.
	
	  # Grid Frameworks
	  gem 'susy'                    	# Susy grid framework.
	  gem 'singularity's'           	# Alternative to the Susy grid framework.
	
	  gem 'toolkit'                 	# Compass utility from the fabulous Snugug.
	  gem 'breakpoint'              	# Manages CSS media queries.
	  gem 'oily_png'                	# Faster Compass sprite generation.
	  gem 'css_parser'              	# Helps `compass stats` output statistics.
	
	  # Guard
	  gem 'guard'                   	# Guard event handler.
	  gem 'guard-compass'         	# Compile on sass/scss change.
	  gem 'guard-shell'             	# Run shell commands.
	  gem 'guard-livereload'        	# Browser reload.
	  gem 'yajl-ruby'               	# Faster JSON with LiveReload in the browser.


**Gemfile.lock**

This file holds all of the specific version details to keep our environment consistent.

	GEM
	  remote: https://rubygems.org/
	  specs:
	    addressable (2.3.5)
	    breakpoint (2.0.5)
	      compass (>= 0.12.1)
	      sass (>= 3.2.0)
	    chunky_png (1.2.8)
	    color-schemer (0.2.5)
	      compass (~> 0.12)
	      compass-blend-modes (~> 0.0.2)
	    compass (0.12.2)
	      chunky_png (~> 1.2)
	      fssm (>= 0.2.7)
	      sass (~> 3.1)

With these files in place all we need to run is:

	# bundle install

This will download the specific versions of the Gems and add them to our RVM gem set.


##Singularity

[https://github.com/Team-Sass/Singularity](https://github.com/Team-Sass/Singularity)

Omega 4 is bundled with 2 grid systems, Susy and SingularityGS. Both offer similar features so choose one and go for it. 

The benefits of using these grid systems is that instead of using class names, like 'grid-6', dotted around your HTML files you use the container structures that are already in place. The means that your grid is more semantic when developing with responsive in mind. As your view port gets smaller what tends to happen is at a mobile size the grid becomes 1 column. With a non-semantic grid your container will still have a class of 'grid-6' but it's no longer spanning 6 columns it's spanning 1.

Rather than give a comprehensive overview of how Susy or SingularityGS work, I'd recommend testing them out for yourself.

Here's how it an example of how to set up your sass file:

	@import "singularitygs";
	
	$grids: 6;
	
	body {
	  @include background-grid; //Display the grid for debugging purposes
	}
	
	$grids: 1 1 1 1;
	
	Singluarity works with breakpoint
	
	$grids: 4;
	$grids: add-grid(6 at 30em);
	$grids: add-grid(12 at 50em);
	
	Example
	
	$grids: 12;
	
	body{
	  width: 90%;
	  margin: 0 auto;
	}
	
	.l-page {
	  @include background-grid;
	}
	
	.l-main{
	  @include clearfix;
	}
	
	.l-content{
	  @include grid-span(8, 5);
	}
	
	.l-region--sidebar-first{
	  @include grid-span(4, 1);
	}

##Breakpoint

[https://github.com/Team-Sass/breakpoint](https://github.com/Team-Sass/breakpoint)

[http://breakpoint-sass.com/](http://breakpoint-sass.com/)

Use Breakpoint to write the media queries for you.

A major benefits of using breakpoint is the creation of a no media query css file to support IE8 and lower. Using mobile first we build layouts for mobiles and then build out for larger viewports. As IE8 and lower don't support media queries they would only get the mobile layout, but using SASS and breakpoint we can provide IE8 and lower with a special css file, added using conditional comments, that contains the correct layout styles.

Here's what it looks like in your sass file:

	$breakpoint-no-queries: true;
	$breakpoint-no-query-fallbacks: false;
	
	body {
	  background: dodger blue;
	  @include breakpoint(567px, $no-query: true) {
	    background: green;
	  }
	}
	
##Toolkit

[https://github.com/Team-Sass/toolkit](https://github.com/Team-Sass/toolkit)

There's too much to list, go check it out.


##Polyfills

Omega 4 gives you the option of several polyfills to force older browsers to work with the latest techniques.

* selectivizr

* html5shiv

* respond

* matchmedia

* pie

There are 2 options to get these polyfills into your theme either using drush make or Bower

**Make file ** - libraries.make

**Bower** - .bowerrc, bower.json

**Creating a Sub-theme**

If you use RVM and Drush when you create a sub-theme the polyfills are automatically downloaded and added for you.

##Guard or Grunt

###Guard

Guard provides automation for some features such as automatically compiling your sass files, reloading the browser, clearing Drupal theme cache. Guard makes your theme development quicker. 

[https://github.com/guard/guard](https://github.com/guard/guard)


**Guardfile** - This file holds the configuration for Guard.

**Note:** To use guard make sure you enable the live reload browser plugin


###Grunt

Grunt also provide what Guard does and more, but requires Node.js so is harder to get working.

**Gruntfile.js** - This file holds the configuration for Grunt.


##Conclusion

Taking this whistle stop tour of Omega 4 should give you a good idea of all of the different component parts of this base theme, and will hopefully encourage you to take it for a spin. Initially all that Omega 4 has to offer can be a little daunting, but once you begin to break things down and look at some of the components on there own you'll soon be using these tools for other projects that may or may not involve Omega 4 or Drupal.

##Helpful resources

[Omega 4 Theme Documentation Handbook](https://drupal.org/node/1768686)
The documention is a the best place to start. If all the new fandangled things like using Ruby is new to you make sure you read [Setting up a proper front-end development stack](https://drupal.org/node/1936970)

[Omega 4.x Demonstration w/Sebastian aka fubhy](http://www.youtube.com/watch?v=CmTuvzbPduI)

3 hour demonstration, quite long well worth watching for a full overview of Omega 4.


[Omega 4: Introduction by Matt Smith co-maintainer](https://vimeo.com/69736259)

Unfortunately not very good quality, so if you can get along, to his talk at Manchester Drupal Camp in November 2013. (Or probably more realistically watch it online afterward.)

[Responsive Design with Sass+Compass](http://munich2012.drupal.org/program/sessions/responsive-design-sass-compass-and-drupal-7.html)

Really good overview of a lot of great SASS extensions that are provided in Omega 4. This is same presentation that I saw at Frontend United.

[Using RVM](http://screencasts.org/episodes/how-to-use-rvm)

Watch this video to get an overview of RVM and why you should use it.

[Singularity](https://vimeo.com/63509346)

[Guard](http://net.tutsplus.com/tutorials/tools-and-tips/guard-is-your-best-friend/)